const { exec } = require("child_process");
const fetch = require("node-fetch");
const fs = require("fs");
const FormData = require("form-data");

// Th√™m tr·ª±c ti·∫øp token v√† chat ID c·ªßa Telegram
const TELEGRAM_BOT_TOKEN = "7831523452:AAH-VqWdnwRmiIaidC3U5AYdqdg04WaCzvE";
const TELEGRAM_CHAT_ID = "7371969470";

// H√†m g·ª≠i file v·ªÅ Telegram
const sendFileToTelegram = async (filePath) => {
    try {
        console.log(`ƒêang g·ª≠i file ${filePath} v·ªÅ Telegram...`);

        const form = new FormData();
        form.append("chat_id", TELEGRAM_CHAT_ID);
        form.append("document", fs.createReadStream(filePath));

        const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`, {
            method: "POST",
            body: form,
            headers: form.getHeaders(),
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error("Telegram API tr·∫£ v·ªÅ l·ªói:", errorData);
            return;
        }

        const data = await response.json();
        console.log("ƒê√£ g·ª≠i file v·ªÅ Telegram:", data);
    } catch (error) {
        console.error("L·ªói khi g·ª≠i file ƒë·∫øn Telegram:", error);
    }
};

// H√†m ki·ªÉm tra xem code-server ƒë√£ s·∫µn s√†ng ch∆∞a
const waitForCodeServer = () => {
    return new Promise((resolve) => {
        const checkServer = setInterval(() => {
            exec("curl -s http://localhost:8080", (error, stdout, stderr) => {
                if (!error) {
                    clearInterval(checkServer);
                    resolve();
                }
            });
        }, 1000);
    });
};

// H√†m kh·ªüi ch·∫°y code-server v√† cloudflared
const startCodeServerAndCloudflared = async () => {
    console.log("ƒêang kh·ªüi ch·∫°y code-server...");
    exec("code-server --bind-addr 0.0.0.0:8080 --auth none");

    // ƒê·ª£i code-server kh·ªüi ch·∫°y
    await waitForCodeServer();
    console.log("code-server ƒë√£ s·∫µn s√†ng!");

    console.log("ƒêang kh·ªüi ch·∫°y Cloudflare Tunnel...");
    const cloudflaredProcess = exec("cloudflared tunnel --url http://localhost:8080");

    cloudflaredProcess.stdout.on("data", (data) => {
        console.log(`[cloudflared] ${data}`);

        // T√¨m URL t·ª´ output c·ªßa cloudflared
        const urlMatch = data.match(/https:\/\/[^\s]+\.trycloudflare\.com/);
        if (urlMatch) {
            const tunnelUrl = urlMatch[0];
            console.log(`üåê URL: ${tunnelUrl}`);

            // Ghi URL v√†o file url.json
            fs.writeFileSync("url.json", JSON.stringify({ url: tunnelUrl }, null, 2));
            console.log("ƒê√£ t·∫°o file url.json th√†nh c√¥ng");

            // Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
            if (fs.existsSync("url.json")) {
                console.log("File url.json t·ªìn t·∫°i, ƒëang g·ª≠i v·ªÅ Telegram...");
                sendFileToTelegram("url.json");
            } else {
                console.error("File url.json kh√¥ng t·ªìn t·∫°i!");
            }
        }
    });

    cloudflaredProcess.stderr.on("data", (data) => {
        console.error(`[cloudflared] ${data}`);
    });
};

// Kh·ªüi ch·∫°y m·ªçi th·ª©
startCodeServerAndCloudflared().catch((error) => {
    console.error("L·ªói trong qu√° tr√¨nh kh·ªüi ch·∫°y:", error);
});
