const { exec, spawn } = require("child_process");

// H√†m ki·ªÉm tra xem code-server ƒë√£ s·∫µn s√†ng ch∆∞a
const waitForCodeServer = () => {
    return new Promise((resolve) => {
        const checkServer = setInterval(() => {
            exec("curl -s http://localhost:8080", (error) => {
                if (!error) {
                    clearInterval(checkServer);
                    resolve();
                }
            });
        }, 1000);
    });
};

// H√†m kh·ªüi ch·∫°y code-server v√† cloudflared
const startCodeServerAndCloudflared = async () => {
    console.log("ƒêang kh·ªüi ch·∫°y code-server...");
    exec("code-server --bind-addr 0.0.0.0:8080 --auth none");

    // ƒê·ª£i code-server kh·ªüi ch·∫°y
    await waitForCodeServer();
    console.log("code-server ƒë√£ s·∫µn s√†ng!");

    console.log("ƒêang kh·ªüi ch·∫°y Cloudflare Tunnel...");
    const cloudflaredProcess = spawn("cloudflared", ["tunnel", "--url", "http://localhost:8080"]);

    // X·ª≠ l√Ω output theo t·ª´ng d√≤ng
    cloudflaredProcess.stdout.on("data", (data) => {
        const output = data.toString();
        output.split("\n").forEach(line => {
            console.log(`[cloudflared] ${line}`);
            // Ki·ªÉm tra n·∫øu Tunnel URL ƒë∆∞·ª£c t·∫°o
            if (line.includes("Your quick Tunnel has been created! Visit it at")) {
                const urlMatch = line.match(/https:\/\/[^\s]+/);
                if (urlMatch) {
                    const tunnelUrl = urlMatch[0].trim();
                    console.log(`üåê URL: ${tunnelUrl}`);
                }
            }
        });
    });

    cloudflaredProcess.stderr.on("data", (data) => {
        const errorOutput = data.toString();
        console.error(`[cloudflared error] ${errorOutput}`);
    });

    cloudflaredProcess.on("close", (code) => {
        console.log(`Cloudflared ƒë√£ ƒë√≥ng v·ªõi m√£ ${code}`);
    });
};

// Kh·ªüi ch·∫°y m·ªçi th·ª©
startCodeServerAndCloudflared().catch((error) => {
    console.error("L·ªói trong qu√° tr√¨nh kh·ªüi ch·∫°y:", error);
});
