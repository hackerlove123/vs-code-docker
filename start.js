const { spawn } = require("child_process"); // ƒê·ªïi t·ª´ exec sang spawn
const fetch = require("node-fetch");

// Th√™m tr·ª±c ti·∫øp token v√† chat ID c·ªßa Telegram
const TELEGRAM_BOT_TOKEN = "7831523452:AAH-VqWdnwRmiIaidC3U5AYdqdg04WaCzvE";
const TELEGRAM_CHAT_ID = "7371969470";

// H√†m g·ª≠i tin nh·∫Øn v·ªÅ Telegram (gi·ªØ nguy√™n)
const sendMessageToTelegram = async (message) => {
    try {
        console.log(`ƒêang g·ª≠i tin nh·∫Øn v·ªÅ Telegram: ${message}`);

        const response = await fetch(
            `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
            {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    chat_id: TELEGRAM_CHAT_ID,
                    text: message,
                }),
            }
        );

        if (!response.ok) {
            const errorData = await response.json();
            console.error("Telegram API tr·∫£ v·ªÅ l·ªói:", errorData);
            return;
        }

        const data = await response.json();
        console.log("ƒê√£ g·ª≠i tin nh·∫Øn v·ªÅ Telegram:", data);
    } catch (error) {
        console.error("L·ªói khi g·ª≠i tin nh·∫Øn ƒë·∫øn Telegram:", error);
    }
};

// H√†m ki·ªÉm tra code-server (gi·ªØ nguy√™n)
const waitForCodeServer = () => {
    return new Promise((resolve) => {
        const checkServer = setInterval(() => {
            exec("curl -s http://localhost:8080", (error, stdout, stderr) => {
                if (!error) {
                    clearInterval(checkServer);
                    resolve();
                }
            });
        }, 1000);
    });
};

// H√†m kh·ªüi ch·∫°y code-server v√† cloudflared (s·ª≠a ph·∫ßn cloudflared)
const startCodeServerAndCloudflared = async () => {
    console.log("ƒêang kh·ªüi ch·∫°y code-server...");
    exec("code-server --bind-addr 0.0.0.0:8080 --auth none");

    // ƒê·ª£i code-server kh·ªüi ch·∫°y
    await waitForCodeServer();
    console.log("code-server ƒë√£ s·∫µn s√†ng!");

    console.log("ƒêang kh·ªüi ch·∫°y Cloudflare Tunnel...");
    
    // S·ª≠ d·ª•ng spawn thay v√¨ exec ƒë·ªÉ x·ª≠ l√Ω stream t·ªët h∆°n
    const cloudflaredProcess = spawn("cloudflared", ["tunnel", "--url", "http://localhost:8080"]);
    let isTunnelCreatedLine = false;

    // X·ª≠ l√Ω output theo t·ª´ng d√≤ng
    const handleOutput = (data, isError = false) => {
        const output = data.toString();
        output.split("\n").forEach(line => {
            console.log(`[cloudflared] ${line}`);

            // Ph√°t hi·ªán d√≤ng b√°o hi·ªáu URL
            if (line.includes("Your quick Tunnel has been created! Visit it at")) {
                isTunnelCreatedLine = true;
            } 
            // L·∫•y URL t·ª´ d√≤ng ti·∫øp theo
            else if (isTunnelCreatedLine) {
                const urlMatch = line.match(/https:\/\/[^\s]+/);
                if (urlMatch) {
                    const tunnelUrl = urlMatch[0].trim();
                    console.log(`üåê URL: ${tunnelUrl}`);
                    sendMessageToTelegram(`üåê URL: ${tunnelUrl}`);
                    isTunnelCreatedLine = false;
                }
            }

            // G·ª≠i l·ªói v·ªÅ Telegram
            if (isError) {
                sendMessageToTelegram(`‚ùå L·ªói t·ª´ cloudflared: ${line}`);
            }
        });
    };

    cloudflaredProcess.stdout.on("data", data => handleOutput(data));
    cloudflaredProcess.stderr.on("data", data => handleOutput(data, true));
    
    // X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng process
    cloudflaredProcess.on("close", code => {
        console.log(`Cloudflared ƒë√£ ƒë√≥ng v·ªõi m√£ ${code}`);
        sendMessageToTelegram(`üî¥ Cloudflared ƒë√£ d·ª´ng (m√£ ${code})`);
    });
};

// Kh·ªüi ch·∫°y m·ªçi th·ª© (gi·ªØ nguy√™n)
startCodeServerAndCloudflared().catch((error) => {
    console.error("L·ªói trong qu√° tr√¨nh kh·ªüi ch·∫°y:", error);
    sendMessageToTelegram(`‚ùå L·ªói kh·ªüi ch·∫°y: ${error.message}`);
});
